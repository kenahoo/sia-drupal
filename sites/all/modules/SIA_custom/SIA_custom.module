<?php

require_once 'sites/all/modules/civicrm/api/class.api.php';

function e($errno, $msg, $file, $line, $vars) {
    if(!($errno & error_reporting())) return FALSE;
    if (preg_match("/use mysqli or PDO instead/", $msg)) return FALSE;

    print "\n\n-----------------------------------------------------------------\n";
    print "Error $errno: $msg<br>\n";
    print "<pre>\n";
    $bt = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 0);
    foreach ($bt as $stack_obj) {
        $l = array_key_exists('line', $stack_obj) ? $stack_obj['line'] : "?";
        $f = array_key_exists('file', $stack_obj) ? $stack_obj['file'] : "?";
        print "$f ($l; $stack_obj[function])\n";
    }
    print "</pre>";
    die();
}
#set_error_handler('e', E_ERROR);

function singer_list() {
    civicrm_initialize();
    $api = new civicrm_api3();
    $api->Contact->Get(array('group' => 6, 'rowCount' => 10000,
			     'return' => 'display_name,custom_4',
			     'sort'=>'last_name,first_name'));

    $arr = array();
    foreach($api->values as $c) {
        $arr[$c->custom_4][] = $c->display_name;
    }
    uksort($arr, "vp_sort");

    $left = '';
    $right = '';
    foreach ($arr as $vp => $p) {
        $chunk = "<b>{$vp}</b>:<br>\n";

        foreach ($p as $name)
            $chunk .= "&nbsp;&nbsp;&nbsp;&nbsp;{$name}<br>\n";

        if (preg_match('/bass|tenor/i', $vp)) {
            $right .= $chunk;
        } else {
            $left .= $chunk;
        }
    }

    return( array($left, $right) );
}

function format_phones($ph) {
    return join(
	'<br>',
	array_map(
	    function($ph) {return sprintf("%s (%s)", $ph['phone'], $ph['phoneTypeId']==2 ? "Mobile" : $ph['locationType']);},
	    array_filter(
		array_values($ph),
		function($ph) {return $ph['locationType'] != 'Billing';}
	    )
	)
    );
}

function singer_roster2() {
    civicrm_initialize();
    $api = new civicrm_api3();
    $api->Contact->Get(array('group' => 6,#'Current Singers',
			     'sequential' => 1,
			     'rowCount' => 10000,
			     'return' => 'custom_4,display_name,email,phone,'.
				       'street_address,city,state_province,postal_code,id',
			     'sort'=>'custom_4,last_name,first_name'));

    return array_map( function($c) {
	return array($c->custom_4,
		     sprintf("%s<br><a href=\"mailto:%s\">%s</a>",
			     $c->display_name, $c->email, $c->email),
		     format_phones(CRM_Core_BAO_Phone::allPhones($c->id)),
		     sprintf("%s<br>%s, %s %s", $c->street_address, $c->city,
			     $c->state_province, $c->postal_code)
	);
    }, $api->values);
}

function singer_roster($db = NULL) {
    $db = is_null($db) ? '' : $db . '.';
    
    $result = db_query("
SELECT v.voice_part_4, c.display_name, e.email,
  CONCAT_WS('<br> ', CONCAT(p1.phone, ' (h)'), CONCAT(p2.phone, ' (w)'), p3.phone) AS phone,
  CONCAT(ad.street_address, '<br> ', ad.city, ', ', ad.abbreviation, ' ', ad.postal_code) AS address
FROM ${db}civicrm_contact c
LEFT OUTER JOIN ${db}civicrm_email e ON c.id=e.contact_id
JOIN ${db}civicrm_group_contact gc ON c.id=gc.contact_id
JOIN ${db}civicrm_group g ON gc.group_id=g.id
LEFT OUTER JOIN ${db}civicrm_value_constituent_information_1 v ON c.id=v.entity_id
LEFT OUTER JOIN (SELECT * FROM ${db}civicrm_phone WHERE location_type_id=1 AND phone_type_id=1) AS p1 ON c.id=p1.contact_id
LEFT OUTER JOIN (SELECT * FROM ${db}civicrm_phone WHERE location_type_id=2 AND phone_type_id=1) AS p2 ON c.id=p2.contact_id
LEFT OUTER JOIN (SELECT GROUP_CONCAT(CONCAT(phone,' (m)') SEPARATOR '<br>') AS phone, contact_id FROM ${db}civicrm_phone WHERE phone_type_id=2 GROUP BY contact_id) AS p3 ON c.id=p3.contact_id
LEFT OUTER JOIN (SELECT a.*, s.abbreviation FROM ${db}civicrm_address a JOIN ${db}civicrm_state_province s ON a.state_province_id=s.id WHERE is_primary=1) AS ad ON c.id=ad.contact_id
WHERE e.is_primary IS TRUE
AND gc.status='Added'
AND g.title='Current Singers'
AND c.is_deleted=0
ORDER BY v.voice_part_4, c.last_name
");
    return($result);
}


/**
 * Implements hook_menu().
 * See http://realtidings.com/blog/12/Apr/26/drupal-commerce-custom-add-cart-link .
 */
function SIA_custom_menu() {
  $items['product/add/%/%'] =
    array(
	  'page callback' => 'SIA_custom_product_add',
	  'page arguments' => array(2,3),  # items 2 & 3 of the path, which come from the '%' components.
	  'access arguments' => array('access content'),
	  'type' => MENU_CALLBACK,
	 );

  $items['donation/add'] =
    array(
	  'page callback' => 'SIA_custom_donation_add',
	  #'page arguments' => array(2),  # item 2 of the path, which comes from the '%' components.
	  'access arguments' => array('access content'),
	  'type' => MENU_CALLBACK,
	 );

  return $items;
}

function render_concert($nid, $tix=true) {
 $c = node_view(node_load($nid));
 hide( $c["field_performance_date"] );
 if (!$tix) {
   hide( $c["field_ticket_info"] );
 }
 return render($c);
}

/**
 * Custom function to add donation to a cart
 */
function SIA_custom_donation_add($amount=1, $tribute='') {
  SIA_custom_product_add(9);
}

/**
 * Custom function to add product(s) to a cart by product id
 */
function SIA_custom_product_add($pid,$quantity=1) {
  if ($product = commerce_product_load($pid) ) {
    $line_item = commerce_product_line_item_new($product, $quantity);

    global $user;
    $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);
    drupal_goto('cart');
  }
}

function collapsible($title, $content, $collapsed=true) {
    return theme('ctools_collapsible', array('handle'=>$title, 'content'=>$content, 'collapsed'=>$collapsed));
}

function treatTable($title, $collapsed, $tab) {
    $content = theme('table', array('header'=> array("Date", "Bringer"), 'rows'=>$tab));
    print( collapsible($title, $content, $collapsed) );
    print( '<div clear="both"></div>' );
}

function ticketLine($desc, $id, $reserved) {
  $content = '<td style="text-align:right">'.$desc.'<br><span style="font-size:smaller">';
  $content .= $reserved ? 'Seats front &amp; center, held until showtime' : 'General admission';
  $content .= "</span></td>\n";
  $content .= '<td><a href="/product/add/'.$id.'/1"><img src="/graphics/add-to-cart.png"></a></td>';
  return $content;
}


getid3_load();

## Voice-part index
function vp_index($a) {
    $vp_order = array('soprano' => 1, 'alto' => 2, 'tenor' => 3, 'bass' => 4);
    $a = preg_replace("/ .*/", "", $a);
    $out = $vp_order[ strtolower($a) ];
    return $out;
}

## Voice-part sort
function vp_sort($a, $b) {
    $res = vp_index($a) - vp_index($b);
    if ($res) return $res;
    return strcmp($a, $b);
}


function listMP3s($files, $print=true) {
  $getID3 = new getID3;

  $result = '';

  foreach ($files as $d) {
    $f1 = preg_replace('/.*\//', '', $d);
    if (!is_dir($d)) {
      continue;
    }
    $result .= "<h3>$f1</h3>\n<ol>\n";

    $filenum = 0;
    foreach (glob("$d/*.[Mm][Pp]3") as $p) {
      $f = basename($p);
      if (!is_file($p)){
        continue;
      }
      $filenum++;

      $mp3info = $getID3->analyze($p);
      $tags = array_key_exists('tags', $mp3info) ? $mp3info['tags']['id3v2'] : array();
      $title = (array_key_exists('title',$tags) && $tags['title'][0]) ? $tags['title'][0] : "<i>$f</i>";
      $composer = (array_key_exists('composer',$tags) && $tags['composer'][0]) ?
          "<span style='font-size:smaller'>[".$tags['composer'][0]."]</span> " :
          "";
      $result .= ("<li> <a href=\"/$p\">$title</a> $composer" .
        "(".round($mp3info["filesize"]/pow(2,20), 1)."M, ".$mp3info["playtime_string"].")\n");
    }
    $result .= "</ol>\n";
  }
  if ($print) {
      print($result);
  } else {
      return($result);
  }
}

function mp3_listing($start, $end, $title, $collapsed=true, $dir='sites/default/files/reh') {

  $cache_key = 'mp3_listing'.$start.$end;
  if ($cache = cache_get($cache_key)) {
    $content = $cache->data;

  } else {

    $to_list = array();
    foreach (array_reverse(glob("$dir/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) as $d) {
      $f1 = substr($d, strlen($dir)+1);
      if (!is_dir($d) || strcmp($f1, $start)<0 || strcmp($f1, $end)>0) {
        continue;
      }
      $to_list[] = $d;
    }
    $content = listMP3s($to_list, false);
    cache_set($cache_key, $content, 'cache', time()+60*60); // 1 hour
  }

  print( collapsible($title, $content, $collapsed) );
}

//# Don't close with ?>
