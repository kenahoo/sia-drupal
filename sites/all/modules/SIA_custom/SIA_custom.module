<?php

require_once 'sites/all/modules/civicrm/api/class.api.php';

function e($errno, $msg, $file, $line, $vars) {
    if(!($errno & error_reporting())) return FALSE;
    if (preg_match("/use mysqli or PDO instead/", $msg)) return FALSE;

    print "\n\n-----------------------------------------------------------------\n";
    print "Error $errno: $msg<br>\n";
    print "<pre>\n";
    $bt = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 0);
    foreach ($bt as $stack_obj) {
        $l = array_key_exists('line', $stack_obj) ? $stack_obj['line'] : "?";
        $f = array_key_exists('file', $stack_obj) ? $stack_obj['file'] : "?";
        print "$f ($l; $stack_obj[function])\n";
    }
    print "</pre>";
    die();
}
#set_error_handler('e', E_ERROR);

function write_csv($path, $data, $header) {
    print("Writing $path\n");
    $fp = fopen($path, 'w');
    fputcsv($fp, $header);
    foreach ($data as $line) {
        fputcsv($fp, $line);
    }
    fclose($fp);
}

function sync_to_constant_contact() {
    global $SITE_CONFIG;
    $mm = $SITE_CONFIG['constantcontact'];

    $tmpfname = tempnam(sys_get_temp_dir(), "contacts");
    write_csv($tmpfname, email_recipients(), array('Email address', 'First name', 'Last name'));

    $curl = curl_init("https://api.constantcontact.com/v2/activities/addcontacts?api_key=" . $mm['api_key']);
    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $mm['access_token']));
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, array(
        'file_name' => 'contacts.csv',
        'lists' => '1331507544',  ## TODO get this dynamically
        'data' => new \CurlFile($tmpfname)
    ));

    if (!($curl_response = curl_exec($curl))) {
        print(curl_error($curl));
    } else {
        print($curl_response . "\n");
    }
}

function email_recipients() {
    civicrm_initialize();
    $api = new civicrm_api3();
    $api->Contact->Get(array('group' => civi_group_id('Email newsletter recipients'),
                             'sequential' => 1,
                             'rowCount' => 20000,
                             'return' => 'email,first_name,last_name'));

    return array_map(function($c) {
        return array($c->email, $c->first_name, $c->last_name);
    }, $api->values);
}


function singer_list() {
    $api = singer_data();

    $arr = array();
    foreach($api->values as $c) {
        $arr[$c->custom_4][] = $c->display_name;
    }
    uksort($arr, "vp_sort");

    $left = '';
    $right = '';
    foreach ($arr as $vp => $p) {
        if ($vp == '')  continue;

        $chunk = "<strong>{$vp}</strong>:\n";

        foreach ($p as $name)
            $chunk .= "&nbsp;&nbsp;&nbsp;&nbsp;{$name}\n";

        if (preg_match('/bass|tenor/i', $vp)) {
            $right .= $chunk;
        } else {
            $left .= $chunk;
        }
    }

    return( array($left, $right) );
}

function format_phones($ph) {
    return join(
        '<br>',
        array_map(
            function($ph) {return sprintf("%s (%s)", $ph['phone'], $ph['phoneTypeId']==2 ? "Mobile" : $ph['locationType']);},
            array_filter(
                array_values($ph),
                function($ph) {return $ph['locationType'] != 'Billing';}
            )
        )
    );
}

## Get numeric group ID for given name
function civi_group_id($name) {
    $result = civicrm_api3('Group', 'get', array(
        'sequential' => 1,
        'return' => array("id"),
        'title' => $name,
    ));
    return $result['values'][0]['id'];
}

function concert_page() {
  $q = db_select('node')
    ->condition('type', 'concert_portfolio', '=')
    ->condition('status', 1, '=');
  $q->addExpression('max(nid)', 'max_nid');
  $concert_nid = $q->execute()->fetchCol();

  return( drupal_render(node_view(node_load($concert_nid[0]), 'full')) );
}

function singer_data($groups=['Current Singers']): civicrm_api3 {
  civicrm_initialize();
  $api = new civicrm_api3();
  $group_list = array_filter(array_map('civi_group_id', $groups), function($x) {return isset($x);});
  $api->Contact->Get([
    'group' => $group_list,
    'sequential' => 1,
    'rowCount' => 10000,
    'return' => 'custom_4,display_name,email,phone,street_address,city,state_province,postal_code,id,image_URL',
    'sort' => 'custom_4,last_name,first_name']);
  return $api;
}

function emlinken($url) {
  if (!$url) return '';

  return sprintf(
    '<a href="%s"><img src="%s" style="width: 100px" alt="Profile image" /></a>',
    $url, $url
  );
}

function singer_roster2() {
    $api = singer_data();

    return array_map( function($c) {
        return array($c->custom_4,
                     sprintf("%s<br><a href=\"mailto:%s\">%s</a>",
                             $c->display_name, $c->email, $c->email),
                     format_phones(CRM_Core_BAO_Phone::allPhones($c->id)),
                     sprintf("%s<br>%s, %s %s", $c->street_address, $c->city,
                             $c->state_province, $c->postal_code),
                     emlinken($c->image_URL)
        );
    }, $api->values);
}

function SIA_custom_token_info() {
    $info['tokens']['sia']['singer_list_html'] = array(
        'name' => t('Singer list HTML'),
        'description' => t("A two-column formatted list of current singers in the database."),
    );
    $info['tokens']['sia']['singer_roster_html'] = array(
      'name' => t('Singer roster HTML'),
      'description' => t("A detailed table of current singers in the database."),
    );
    $info['tokens']['sia']['collaborator_concerts'] = array(
      'name' => t('Collaborator concerts'),
      'description' => t("A list of concerts this collaborator has participated in."),
    );
    return $info;
}

/**
 * Implements hook_tokens(). This hook replaces each token with its value.
 */
function SIA_custom_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);

    foreach ($tokens as $name => $original) {
        if ($name == 'singer_list_html') {
            $arr = singer_list();
            $val = ("<div style=\"float:left;margin:20px\">{$arr[0]}</div>" .
                    "<div style=\"float:left;margin:20px\">{$arr[1]}</div>" .
                    "<br  style=\"clear:both\">");
            $replacements[$original] = $val;
        } elseif ($name == 'singer_roster_html') {
          $rows = singer_roster2();
          $val = theme('table',
            array('header' => array('Voice Part', 'Name', 'Phone', 'Address', 'Photo'),
              'rows' => $rows)
          );
          $replacements[$original] = $val;
        } elseif ($name == 'list_sync_check') {
          $replacements[$original] = list_sync_check();
        } elseif ($name == 'concert_page') {
          $replacements[$original] = concert_page();
        } elseif ($name == 'collaborator_concerts') {
          $replacements[$original] = collaborator_concerts();
        }
    }

    return $replacements;
}

/**
 * @throws EntityFieldQueryException
 */
function collaborator_concerts() {
  # Return list of all concerts this collaborator has been involved in

  $node = menu_get_object();
  if ($node->type != 'portfolio') {
    trigger_error("collaborator_concerts() called on non-collaborator page", E_USER_WARNING);
    return '';
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('type', 'concert_portfolio')
    ->fieldOrderBy('field_concert_date', 'value', 'DESC');

  $got = [];
  foreach ($query->execute() as $entity_type => $entities) {
    foreach ($entities as $entity_id => $entity) {
      $concert_node = node_load($entity_id);
      $collabs = field_get_items('node', $concert_node, 'field_collaborator_node');
      foreach ($collabs as $c) {
        if ($c['target_id'] == $node->nid) {
          $got[] = ('<li><a href="' . url('node/' . $concert_node->nid) . '">' . $concert_node->title . '</a>, ' .
            date_create($concert_node->field_concert_date['und'][0]['value'])->format('F Y') . '</li>');
        }
      }
    }
  }

  if ($got) {
    return "<strong>SIA Performances:</strong><ul>" . implode("\n", $got) . "</ul>";
  } else {
    return '';
  }
}


/**
 * Implements hook_menu().
 * See http://realtidings.com/blog/12/Apr/26/drupal-commerce-custom-add-cart-link .
 */
function SIA_custom_menu() {
  $items['product/add/%/%'] =
    array(
          'page callback' => 'SIA_custom_product_add',
          'page arguments' => array(2,3),  # items 2 & 3 of the path, which come from the '%' components.
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
         );

  $items['donation/add'] =
    array(
          'page callback' => 'SIA_custom_donation_add',
          #'page arguments' => array(2),  # item 2 of the path, which comes from the '%' components.
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
         );

  return $items;
}

function render_concert($nid, $tix=true) {
 $c = node_view(node_load($nid));
 hide( $c["field_performance_date"] );
 if (!$tix) {
   hide( $c["field_ticket_info"] );
 }
 return render($c);
}

/**
 * Custom function to add donation to a cart
 */
function SIA_custom_donation_add($amount=1, $tribute='') {
  SIA_custom_product_add(9);
}

/**
 * Custom function to add product(s) to a cart by product id
 */
function SIA_custom_product_add($pid,$quantity=1) {
  if ($product = commerce_product_load($pid) ) {
    $line_item = commerce_product_line_item_new($product, $quantity);

    global $user;
    $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);
    drupal_goto('cart');
  }
}

function collapsible($title, $content, $collapsed=true) {
    return theme('ctools_collapsible', array('handle'=>$title, 'content'=>$content, 'collapsed'=>$collapsed));
}

function treatTable($title, $collapsed, $tab) {
    $content = theme('table', array('header'=> array("Date", "Bringer"), 'rows'=>$tab));
    print( collapsible($title, $content, $collapsed) );
    print( '<div clear="both"></div>' );
}

function ticketLine($desc, $id, $reserved) {
  $content = '<td style="text-align:right">'.$desc.'<br><span style="font-size:smaller">';
  $content .= $reserved ? 'Seats front &amp; center, held until showtime' : 'General admission';
  $content .= "</span></td>\n";
  $content .= '<td><a href="/product/add/'.$id.'/1"><img src="/graphics/add-to-cart.png"></a></td>';
  return $content;
}


//getid3_load();

## Voice-part index
function vp_index($a) {
    $vp_order = array('soprano' => 1, 'alto' => 2, 'tenor' => 3, 'bass' => 4);
    $a = preg_replace("/ .*/", "", $a);
    $out = $vp_order[ strtolower($a) ];
    return $out;
}

## Voice-part sort
function vp_sort($a, $b) {
    $res = vp_index($a) - vp_index($b);
    if ($res) return $res;
    return strcmp($a, $b);
}


function listMP3s($files, $print=true) {
  $getID3 = new getID3;

  $result = '';

  foreach ($files as $d) {
    $f1 = preg_replace('/.*\//', '', $d);
    if (!is_dir($d)) {
      continue;
    }
    $result .= "<h3>$f1</h3>\n<ol>\n";

    $filenum = 0;
    foreach (glob("$d/*.[Mm][Pp]3") as $p) {
      $f = basename($p);
      if (!is_file($p)){
        continue;
      }
      $filenum++;

      $mp3info = $getID3->analyze($p);
      $tags = array_key_exists('tags', $mp3info) ? $mp3info['tags']['id3v2'] : array();
      $title = (array_key_exists('title',$tags) && $tags['title'][0]) ? $tags['title'][0] : "<i>$f</i>";
      $composer = (array_key_exists('composer',$tags) && $tags['composer'][0]) ?
          "<span style='font-size:smaller'>[".$tags['composer'][0]."]</span> " :
          "";
      $result .= ("<li> <a href=\"/$p\">$title</a> $composer" .
        "(".round($mp3info["filesize"]/pow(2,20), 1)."M, ".$mp3info["playtime_string"].")\n");
    }
    $result .= "</ol>\n";
  }
  if ($print) {
      print($result);
  } else {
      return($result);
  }
}

function mp3_listing($start, $end, $title, $collapsed=true, $dir='sites/default/files/reh') {

  $cache_key = 'mp3_listing'.$start.$end;
  if ($cache = cache_get($cache_key)) {
    $content = $cache->data;

  } else {

    $to_list = array();
    foreach (array_reverse(glob("$dir/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) as $d) {
      $f1 = substr($d, strlen($dir)+1);
      if (!is_dir($d) || strcmp($f1, $start)<0 || strcmp($f1, $end)>0) {
        continue;
      }
      $to_list[] = $d;
    }
    $content = listMP3s($to_list, false);
    cache_set($cache_key, $content, 'cache', time()+60*60); // 1 hour
  }

  print( collapsible($title, $content, $collapsed) );
}

class ListSync {
  public string $drup_group = 'choir member';
  public array $crm_groups = ['Current Singers', 'Non-Singing Members'];
  public array $mm;

  public function __construct(array $mm) {
    $this->mm = $mm;
  }

  function show_diffs($a, $b, $message): array {
    $diffs = array_diff($a, $b);
    if (!$diffs) {
      return $diffs;
    }
    return [
      'emails' => $diffs,
      'html' => theme_item_list([
        'items' => $diffs,
        'title' => "$message:",
        'type' => 'ul',
        'attributes' => []
      ])];
  }

  function get_crm(): array {
    $api = singer_data($this->crm_groups);
    $emails = array_map(function($c){return $c->email;}, $api->values);
    asort($emails);
    return $emails;
  }

  function get_drupal(): array {
    $role = user_role_load_by_name($this->drup_group);
    $uids = db_select('users_roles', 'ur')
      ->fields('ur', ['uid'])
      ->condition('ur.rid', $role->rid, '=')
      ->execute()
      ->fetchCol();
    $users = user_load_multiple($uids);

    $emails = array();
    foreach($users as $user) {
      $emails[] = $user->mail;
    }
    asort($emails);
    return $emails;
  }

  /**
   * @throws RuntimeException
   */
  function get_mailman(): array {
    $mm = $this->mm;
    $cmd = sprintf("%s --ssl --csv %s %s %s",
      $mm['script'], $mm['host'], $mm['list'], $mm['password']);
    $handle = popen($cmd, "r");
    $header = fgetcsv($handle);
    if (!$handle || !$header) {
      throw new RuntimeException("Couldn't retrieve info from MailMan");
    }

    $i = array_search("email address", $header);

    $emails = [];
    while (($data = fgetcsv($handle)) !== FALSE) {
      $emails[] = $data[$i];
    }
    asort($emails);
    return $emails;
  }

  public function as_html(): string {
    $from_crm = $this->get_crm();
    $from_drupal = $this->get_drupal();
    $from_mailman = $this->get_mailman();

    $dg = $this->drup_group;

    $out = '';

    if ($result = $this->show_diffs($from_crm, $from_drupal, "Add to Drupal 'dg' group")) {
      $out .= $result['html'];
      $out .= "<p>To add to Drupal: drush user-add-role '$dg' " . join(",", $result['emails']) . "</p>";
    }
    if ($result = $this->show_diffs($from_drupal, $from_crm, "Remove from Drupal 'dg' group")) {
      $out .= $result['html'];
      $out .= "<p>To remove from Drupal: drush user-remove-role '$dg' " . join(",", $result['emails']) . "</p>";
    }
    if ($result = $this->show_diffs($from_crm, $from_mailman, "Add to MailMan list")) {
      $out .= $result['html'];
    }
    if ($result = $this->show_diffs($from_mailman, $from_crm, "Remove from MailMan list")) {
      $out .= $result['html'];
    }

    if (!$out) {
      $out .= "<p><em>Nothing!  Looks like you're good!</em></p>";
    }

    $url = sprintf("https://%s/mailman/admin/%s/members", $this->mm['host'], $this->mm['list']);
    $out .= "<p>MailMan list is at <a href=\"$url\">$url</a></p>";

    return $out;
  }
}

function list_sync_check(): string {
  global $SITE_CONFIG;
  $ls = new ListSync($SITE_CONFIG['mailman']);
  return $ls->as_html();
}
